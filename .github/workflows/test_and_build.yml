name: test_and_build

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip poetry
        poetry config virtualenvs.create false
        poetry install

    - name: Check codestyle
      run: |
        pre-commit run --all

    # - name: Run tests
    #   run: |
    #     PYTHONPATH=cognite/transformations_cli poetry run pytest  -v  --cov-report xml:coverage.xml --cov=cognite/transformations_cli
    #     coverage xml
    #   env:
    #       CLIENT_ID: ${{secrets.EXTRACTORS_CLIENT_ID}}
    #       CLIENT_SECRET: ${{secrets.EXTRACTORS_CLIENT_SECRET}}

    - id: parse_version
      name: "Parse version"
      run: |
        echo "::set-output name=cli_version::$('sed -n -e "/^__version__/p" cognite/transformations_cli/__init__.py | cut -d\\" -f2')"
      
    - id: parse_version2
      name: "Parse version2"
      run: |
        echo ${{ steps.parse_version.outputs.cli_version }}
        
    - name: "Build and push Docker image"
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        file: ./Dockerfile
        tags: cognite/transformations-cli:${{ steps.parse_version.outputs.cli_version }}

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml

    - name: Build package
      run: poetry build
