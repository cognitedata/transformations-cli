name: release

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
        
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip poetry
        poetry config virtualenvs.create false
        poetry install

    - name: Check codestyle
      run: |
        pre-commit run --all

    - name: Run tests
      run: |
        PYTHONPATH=cognite/transformations_cli poetry run pytest  -v  --cov-report xml:coverage.xml --cov=cognite/transformations_cli
        coverage xml
      env:
          CLIENT_ID: ${{secrets.EXTRACTORS_CLIENT_ID}}
          CLIENT_SECRET: ${{secrets.EXTRACTORS_CLIENT_SECRET}}

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml

    - name: Build package
      run: poetry build
    
    - name: Build docs
      run: cd docs && make html

    - name: Release to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload --verbose dist/* || echo 'Version exists'

    - name: Push tag for the new version
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        custom_tag: ${{ steps.parse_version.outputs.cli_version }}

  publish_to_dockerhub:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v2

    - name: "Set up Docker Buildx"
      uses: docker/setup-buildx-action@v1
      with:
        install: true

    - name: "Log in to the Container registry"
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

    - id: parse_version
      name: "Parse version"
      run: |
        echo "::set-output name=cli_version::$(sed -n -e "/^__version__/p" cognite/transformations_cli/__init__.py | cut -c 16- | sed -e 's/^"//' -e 's/"$//')"
      
    - name: "Echo version"
      run: |
        echo ${{ steps.parse_version.outputs.cli_version }}

    - name: "Build and push Docker image"
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        file: ./Dockerfile
        tags: cognite/transformations-cli:${{ steps.parse_version.outputs.cli_version }}
